diff --git a/src/hdl/TempSensorCtl.vhd b/src/hdl/TempSensorCtl.vhd
index d8f53bc..f0ed568 100644
--- a/src/hdl/TempSensorCtl.vhd
+++ b/src/hdl/TempSensorCtl.vhd
@@ -2,6 +2,7 @@
 ----------------------------------------------------------------------------
 -- Author:  Elod Gyorgy
 --          Copyright 2014 Digilent, Inc.
+-- adapted by Philipp Lehninger for 16bit resolution
 ----------------------------------------------------------------------------
 -- 
 -- Create Date:    15:26:37 02/17/2014 
@@ -47,7 +48,7 @@ entity TempSensorCtl is
 --		TMP_INT : in STD_LOGIC; -- Interrupt line from the ADT7420, not used in this project
 --		TMP_CT : in STD_LOGIC;  -- Critical Temperature interrupt line from ADT7420, not used in this project
 		
-		TEMP_O : out STD_LOGIC_VECTOR(12 downto 0); --12-bit two's complement temperature with sign bit
+		TEMP_O : out STD_LOGIC_VECTOR(15 downto 0); --15-bit two's complement temperature with sign bit
 		RDY_O : out STD_LOGIC;	--'1' when there is a valid temperature reading on TEMP_O
 		ERR_O : out STD_LOGIC; --'1' if communication error
 		
@@ -116,7 +117,7 @@ end component;
    signal state, nstate : state_type; 
 
 	
-   constant NO_OF_INIT_VECTORS : natural := 3; -- number of init vectors in TempSensInitMap
+   constant NO_OF_INIT_VECTORS : natural := 4; -- number of init vectors in TempSensInitMap
 	constant DATA_WIDTH : integer := 1 + 8 + 8; -- RD/WR bit + 1 byte register address + 1 byte data
 	constant ADDR_WIDTH : natural := natural(ceil(log(real(NO_OF_INIT_VECTORS), 2.0)));
 	
@@ -124,7 +125,8 @@ end component;
 	signal TempSensInitMap: TempSensInitMap_type := (
 		IRD & x"0B" & x"CB", -- Read ID R[0x0B]=0xCB
 		IWR & x"2F" & x"00", -- Reset R[0x2F]=don't care
-		IRD & x"0B" & x"CB" -- Read ID R[0x0B]=0xCB
+        IRD & x"0B" & x"CB", -- Read ID R[0x0B]=0xCB
+        IWR & x"03" & x"80"  -- Set config: 16bit temperature, continous sampling
 		);	
 	
 	signal initWord: std_logic_vector (DATA_WIDTH-1 downto 0);
@@ -151,7 +153,7 @@ begin
 ----------------------------------------------------------------------------------
 -- Outputs
 ----------------------------------------------------------------------------------
-TEMP_O <= tempReg(15 downto 3);
+TEMP_O <= tempReg(15 downto 0);--3); resolution should be 16bit
 
 RDY_O <= '1' when fReady else
 			'0';
@@ -312,7 +314,7 @@ Inst_TWICtl : TWICtl
 				twiStb <= '1';
 				twiAddr(0) <= IRD;
 			when stReadTempD2 => --this state reads the temperature LSB
-            twiStb <= '1';
+                twiStb <= '1';
 				twiAddr(0) <= IRD;
 				
 			when stError => --in case of an I2C error during temperature poll
@@ -321,7 +323,7 @@ Inst_TWICtl : TWICtl
 			
    end process;
  
-   NEXT_STATE_DECODE: process (state, twiDone, twiErr, initWord, twiDo, retryCnt, waitCnt)
+   NEXT_STATE_DECODE: process (state, twiDone, twiErr, initWord, twiDo, retryCnt, waitCnt, initA)
    begin
       --declare default state for nstate to avoid latches
       nstate <= state;  --default is to stay in current state
@@ -393,5 +395,4 @@ Inst_TWICtl : TWICtl
       end case;      
    end process;
 
-end Behavioral;
-
+end Behavioral;
\ No newline at end of file
